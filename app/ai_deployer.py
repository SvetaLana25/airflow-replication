import os
import subprocess
import logging
from ai_debugger import ask_gemini  # —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ

logging.basicConfig(
    filename='deploy.log',
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

def summarize_readme(readme_path="README.md"):
    if not os.path.exists(readme_path):
        return "README.md not found"
    with open(readme_path, "r", encoding="utf-8") as f:
        return ask_gemini("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n" + f.read())

def analyze_structure():
    files = []
    for root, _, filenames in os.walk("."):
        for f in filenames:
            if ".git" not in root:
                files.append(os.path.join(root, f))
    structure = "\n".join(files[:100])
    return ask_gemini("–í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n" + structure)

def run_tests():
    result = subprocess.run(["pytest", "app/test_app.py"], capture_output=True, text=True)
    if result.returncode == 0:
        logging.info("‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ.")
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:\n%s", result.stderr)
    return result

def deploy():
    try:
        result = subprocess.run(["docker-compose", "up", "--build", "-d"],
                                capture_output=True, text=True, timeout=600)
        if result.returncode == 0:
            logging.info("‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        else:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ:\n%s", result.stderr)
            logging.info("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç Gemini:")
            logging.info(ask_gemini(result.stderr))
    except Exception as e:
        logging.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ: %s", str(e))

if __name__ == "__main__":
    logging.info("üîç –ê–Ω–∞–ª–∏–∑ README.md:")
    logging.info(summarize_readme())

    logging.info("üìÅ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:")
    logging.info(analyze_structure())

    logging.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤:")
    run_tests()

    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è:")
    deploy()
