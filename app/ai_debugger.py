# ai_debugger.py
import os
import requests
import json

# –ë–µ—Ä—ë–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ Docker)
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
assert GEMINI_API_KEY, "–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GEMINI_API_KEY"

# URL –¥–ª—è Gemini (flash-–º–æ–¥–µ–ª—å)
GEMINI_URL = (
    f"https://generativelanguage.googleapis.com/v1beta/models/"
    f"gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
)

def get_last_errors(log_path='error.log', n=3):
    """–ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ n —Å—Ç—Ä–æ–∫ —Å ERROR –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞."""
    if not os.path.exists(log_path):
        return "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    with open(log_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    errs = [l for l in lines if 'ERROR' in l]
    return ''.join(errs[-n:]) or "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π ERROR."

def ask_gemini(error_text: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç."""
    payload = {
        "contents": [{
            "parts": [{"text": f"–í–æ—Ç –ª–æ–≥ –æ—à–∏–±–∫–∏:\n{error_text}\n–ö–∞–∫ —ç—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?"}]
        }]
    }
    r = requests.post(GEMINI_URL,
                      headers={'Content-Type': 'application/json'},
                      data=json.dumps(payload))
    j = r.json()
    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    try:
        return j['candidates'][0]['content']['parts'][0]['text']
    except Exception:
        return f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini: {json.dumps(j, ensure_ascii=False, indent=2)}"

if __name__ == "__main__":
    errs = get_last_errors()
    print("üß† –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:\n", errs)
    suggestion = ask_gemini(errs)
    print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç Gemini:\n", suggestion)
