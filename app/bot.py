import logging
import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from recommender import get_recommendations

logging.basicConfig(
    filename='error.log',
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.ERROR
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
print("üîç BOT_TOKEN:", BOT_TOKEN)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class RecommenderForm(StatesGroup):
    mood = State()
    energy = State()
    tempo = State()

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üéµ –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç.\n–ù–∞–ø–∏—à–∏ /recommend, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏.")

@dp.message_handler(commands='recommend')
async def cmd_recommend(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–í–µ—Å—ë–ª–æ–µ", callback_data='mood_0.9'),
        types.InlineKeyboardButton("–ì—Ä—É—Å—Ç–Ω–æ–µ", callback_data='mood_0.2'),
        types.InlineKeyboardButton("–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ", callback_data='mood_0.4'),
        types.InlineKeyboardButton("–≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ", callback_data='mood_0.8'),
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:", reply_markup=keyboard)
    await RecommenderForm.mood.set()

@dp.callback_query_handler(lambda c: c.data.startswith('mood_'), state=RecommenderForm.mood)
async def process_mood(callback_query: types.CallbackQuery, state: FSMContext):
    valence = float(callback_query.data.split('_')[1])
    await state.update_data(valence=valence)

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–ù–∏–∑–∫–∞—è", callback_data='energy_0.3'),
        types.InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data='energy_0.6'),
        types.InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è", callback_data='energy_0.9'),
    )
    await bot.send_message(callback_query.from_user.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —ç–Ω–µ—Ä–≥–∏—é:", reply_markup=keyboard)
    await RecommenderForm.energy.set()

@dp.callback_query_handler(lambda c: c.data.startswith('energy_'), state=RecommenderForm.energy)
async def process_energy(callback_query: types.CallbackQuery, state: FSMContext):
    energy = float(callback_query.data.split('_')[1])
    await state.update_data(energy=energy)

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–î–ª—è –æ—Ç–¥—ã—Ö–∞", callback_data='tempo_90'),
        types.InlineKeyboardButton("–î–ª—è –ø—Ä–æ–≥—É–ª–∫–∏", callback_data='tempo_110'),
        types.InlineKeyboardButton("–î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data='tempo_130'),
    )
    await bot.send_message(callback_query.from_user.id, "–ò –Ω–∞–∫–æ–Ω–µ—Ü ‚Äî –≤—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", reply_markup=keyboard)
    await RecommenderForm.tempo.set()

@dp.callback_query_handler(lambda c: c.data.startswith('tempo_'), state=RecommenderForm.tempo)
async def process_tempo(callback_query: types.CallbackQuery, state: FSMContext):
    tempo = float(callback_query.data.split('_')[1])
    await state.update_data(tempo=tempo)

    user_data = await state.get_data()
    valence = user_data['valence']
    energy = user_data['energy']

    try:
        tracks = get_recommendations(valence, energy, tempo)
        if not tracks:
            await bot.send_message(callback_query.from_user.id, "‚ö†Ô∏è –¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
        else:
            response = "üéß –í–æ—Ç —Ç–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
            for t in tracks:
                response += f"üéµ {t['name']} ‚Äî {t['artists']} ({int(t['tempo'])} BPM)\n"
            await bot.send_message(callback_query.from_user.id, response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await bot.send_message(callback_query.from_user.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
    finally:
        await state.finish()

if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")